name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Detect changes to determine which services to build
  changes:
    runs-on: ubuntu-latest
    outputs:
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      auth-service: ${{ steps.changes.outputs.auth-service }}
      tax-engine: ${{ steps.changes.outputs.tax-engine }}
      geolocation-service: ${{ steps.changes.outputs.geolocation-service }}
      ai-service: ${{ steps.changes.outputs.ai-service }}
      content-service: ${{ steps.changes.outputs.content-service }}
      analytics-service: ${{ steps.changes.outputs.analytics-service }}
      notification-service: ${{ steps.changes.outputs.notification-service }}
      ad-service: ${{ steps.changes.outputs.ad-service }}
      file-service: ${{ steps.changes.outputs.file-service }}
      report-service: ${{ steps.changes.outputs.report-service }}
      monitoring-service: ${{ steps.changes.outputs.monitoring-service }}
      frontend: ${{ steps.changes.outputs.frontend }}
      shared: ${{ steps.changes.outputs.shared }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api-gateway:
              - 'api-gateway/**'
              - 'shared/**'
            auth-service:
              - 'auth-service/**'
              - 'shared/**'
            tax-engine:
              - 'tax-engine/**'
              - 'shared/**'
            geolocation-service:
              - 'geolocation-service/**'
              - 'shared/**'
            ai-service:
              - 'ai-service/**'
              - 'shared/**'
            content-service:
              - 'content-service/**'
              - 'shared/**'
            analytics-service:
              - 'analytics-service/**'
              - 'shared/**'
            notification-service:
              - 'notification-service/**'
              - 'shared/**'
            ad-service:
              - 'ad-service/**'
              - 'shared/**'
            file-service:
              - 'file-service/**'
              - 'shared/**'
            report-service:
              - 'report-service/**'
              - 'shared/**'
            monitoring-service:
              - 'monitoring-service/**'
              - 'shared/**'
            frontend:
              - 'frontend/**'
            shared:
              - 'shared/**'

  # Test Node.js services
  test-nodejs:
    needs: changes
    runs-on: ubuntu-latest
    if: |
      needs.changes.outputs.api-gateway == 'true' ||
      needs.changes.outputs.auth-service == 'true' ||
      needs.changes.outputs.geolocation-service == 'true' ||
      needs.changes.outputs.content-service == 'true' ||
      needs.changes.outputs.analytics-service == 'true' ||
      needs.changes.outputs.notification-service == 'true' ||
      needs.changes.outputs.ad-service == 'true' ||
      needs.changes.outputs.file-service == 'true' ||
      needs.changes.outputs.monitoring-service == 'true' ||
      needs.changes.outputs.shared == 'true'

    strategy:
      matrix:
        service:
          - api-gateway
          - auth-service
          - geolocation-service
          - content-service
          - analytics-service
          - notification-service
          - ad-service
          - file-service
          - monitoring-service

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ matrix.service }}/package-lock.json'

      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          npm ci

      - name: Run linting
        run: |
          cd ${{ matrix.service }}
          npm run lint

      - name: Run tests
        run: |
          cd ${{ matrix.service }}
          npm run test
        env:
          NODE_ENV: test

  # Test Python services
  test-python:
    needs: changes
    runs-on: ubuntu-latest
    if: |
      needs.changes.outputs.tax-engine == 'true' ||
      needs.changes.outputs.ai-service == 'true' ||
      needs.changes.outputs.report-service == 'true' ||
      needs.changes.outputs.shared == 'true'

    strategy:
      matrix:
        service:
          - tax-engine
          - ai-service
          - report-service

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '${{ matrix.service }}/requirements.txt'

      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          pip install -r requirements.txt

      - name: Run linting
        run: |
          cd ${{ matrix.service }}
          flake8 .
          black --check .
          isort --check-only .

      - name: Run type checking
        run: |
          cd ${{ matrix.service }}
          mypy .

      - name: Run tests
        run: |
          cd ${{ matrix.service }}
          pytest --cov=. --cov-report=xml
        env:
          PYTHON_ENV: test

  # Test Frontend
  test-frontend:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.frontend == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint

      - name: Run type checking
        run: |
          cd frontend
          npm run type-check

      - name: Build application
        run: |
          cd frontend
          npm run build
        env:
          NODE_ENV: production

      - name: Run tests
        run: |
          cd frontend
          npm run test

  # Build and push Docker images (only on main branch)
  build-and-deploy:
    needs: [changes, test-nodejs, test-python, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (success() || github.event_name == 'workflow_dispatch')

    strategy:
      matrix:
        include:
          - service: api-gateway
            condition: ${{ needs.changes.outputs.api-gateway == 'true' || needs.changes.outputs.shared == 'true' }}
          - service: auth-service
            condition: ${{ needs.changes.outputs.auth-service == 'true' || needs.changes.outputs.shared == 'true' }}
          - service: tax-engine
            condition: ${{ needs.changes.outputs.tax-engine == 'true' || needs.changes.outputs.shared == 'true' }}
          - service: geolocation-service
            condition: ${{ needs.changes.outputs.geolocation-service == 'true' || needs.changes.outputs.shared == 'true' }}
          - service: ai-service
            condition: ${{ needs.changes.outputs.ai-service == 'true' || needs.changes.outputs.shared == 'true' }}
          - service: content-service
            condition: ${{ needs.changes.outputs.content-service == 'true' || needs.changes.outputs.shared == 'true' }}
          - service: analytics-service
            condition: ${{ needs.changes.outputs.analytics-service == 'true' || needs.changes.outputs.shared == 'true' }}
          - service: notification-service
            condition: ${{ needs.changes.outputs.notification-service == 'true' || needs.changes.outputs.shared == 'true' }}
          - service: ad-service
            condition: ${{ needs.changes.outputs.ad-service == 'true' || needs.changes.outputs.shared == 'true' }}
          - service: file-service
            condition: ${{ needs.changes.outputs.file-service == 'true' || needs.changes.outputs.shared == 'true' }}
          - service: report-service
            condition: ${{ needs.changes.outputs.report-service == 'true' || needs.changes.outputs.shared == 'true' }}
          - service: monitoring-service
            condition: ${{ needs.changes.outputs.monitoring-service == 'true' || needs.changes.outputs.shared == 'true' }}
          - service: frontend
            condition: ${{ needs.changes.outputs.frontend == 'true' }}

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        if: ${{ matrix.condition }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        if: ${{ matrix.condition }}
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        if: ${{ matrix.condition }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            globaltaxcalc/${{ matrix.service }}:latest
            globaltaxcalc/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Railway (only on main branch after successful build)
  deploy:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Railway
        uses: railway-ai/railway-action@v1
        with:
          token: ${{ secrets.RAILWAY_TOKEN }}
          service: globaltaxcalc

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow