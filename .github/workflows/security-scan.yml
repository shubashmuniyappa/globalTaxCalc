name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'

jobs:
  # === DEPENDENCY VULNERABILITY SCANNING ===
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate --json > npm-audit.json
        continue-on-error: true

      - name: Run Snyk vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json > snyk-report.json
        continue-on-error: true

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-vulnerability-reports
          path: |
            npm-audit.json
            snyk-report.json

  # === CONTAINER SECURITY SCANNING ===
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth-service, tax-engine, report-export-service, file-processing-service, monitoring-health-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t globaltaxcalc-${{ matrix.service }}:scan -f ${{ matrix.service }}/Dockerfile .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'globaltaxcalc-${{ matrix.service }}:scan'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'

      - name: Run Anchore container scan
        uses: anchore/scan-action@v3
        with:
          image: 'globaltaxcalc-${{ matrix.service }}:scan'
          format: 'sarif'
          output-file: 'anchore-${{ matrix.service }}.sarif'

      - name: Upload Anchore scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'anchore-${{ matrix.service }}.sarif'

  # === STATIC APPLICATION SECURITY TESTING (SAST) ===
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
          generateSarif: "1"

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: Run Bandit security scanner (for Python scripts)
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true

      - name: Upload SAST results
        uses: actions/upload-artifact@v3
        with:
          name: sast-reports
          path: |
            semgrep.sarif
            bandit-report.json

  # === DYNAMIC APPLICATION SECURITY TESTING (DAST) ===
  dast-scan:
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    needs: [dependency-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Start application for DAST
        run: |
          # Start services in test mode
          docker-compose -f docker-compose.test.yml up -d
          sleep 60

      - name: Wait for services to be ready
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:3000/health; do sleep 5; done'

      - name: Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Run Nuclei vulnerability scanner
        uses: projectdiscovery/nuclei-action@main
        with:
          target: 'http://localhost:3000'
          github-report: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run custom security tests
        working-directory: ./tests
        run: |
          npm install
          npm run test:security
        env:
          BASE_URL: http://localhost:3000

      - name: Upload DAST results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dast-reports
          path: |
            report_html.html
            report_json.json
            tests/reports/security-*.json

  # === SECRETS SCANNING ===
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # === INFRASTRUCTURE SECURITY SCANNING ===
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,terraform
          output_format: sarif
          output_file_path: checkov-report.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-report.sarif

      - name: Run Dockerfile security scan
        run: |
          docker run --rm -v "$PWD":/workspace hadolint/hadolint:latest-alpine \
            find /workspace -name "Dockerfile*" -exec hadolint {} \;

  # === COMPLIANCE SCANNING ===
  compliance-scan:
    name: Compliance & License Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run license compliance check
        run: |
          npx license-checker --json > license-report.json
          npx license-checker --excludePrivatePackages --failOn 'GPL'

      - name: Check for GDPR compliance patterns
        run: |
          # Check for potential GDPR violations in code
          grep -r "email\|phone\|address\|ssn\|social" --include="*.js" --include="*.ts" . > gdpr-patterns.txt || true

      - name: Upload compliance reports
        uses: actions/upload-artifact@v3
        with:
          name: compliance-reports
          path: |
            license-report.json
            gdpr-patterns.txt

  # === SECURITY REPORT AGGREGATION ===
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, sast-scan, dast-scan, secrets-scan, infrastructure-scan, compliance-scan]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Generate consolidated security report
        run: |
          node <<EOF
          const fs = require('fs');
          const path = require('path');

          const report = {
            timestamp: new Date().toISOString(),
            repository: process.env.GITHUB_REPOSITORY,
            branch: process.env.GITHUB_REF_NAME,
            commit: process.env.GITHUB_SHA,
            workflow: process.env.GITHUB_WORKFLOW,
            summary: {
              total_vulnerabilities: 0,
              critical: 0,
              high: 0,
              medium: 0,
              low: 0
            },
            scans: {}
          };

          // Process npm audit results
          try {
            const npmAudit = JSON.parse(fs.readFileSync('dependency-vulnerability-reports/npm-audit.json', 'utf8'));
            report.scans.npm_audit = {
              vulnerabilities: npmAudit.metadata?.vulnerabilities || {},
              total: Object.values(npmAudit.metadata?.vulnerabilities || {}).reduce((a, b) => a + b, 0)
            };
          } catch (e) {
            console.log('No npm audit report found');
          }

          // Process DAST results
          try {
            const dastFiles = fs.readdirSync('dast-reports/');
            const securityFiles = dastFiles.filter(f => f.startsWith('security-'));
            report.scans.dast = {
              files_scanned: securityFiles.length,
              reports: securityFiles
            };
          } catch (e) {
            console.log('No DAST reports found');
          }

          // Calculate totals
          Object.values(report.scans).forEach(scan => {
            if (scan.vulnerabilities) {
              Object.entries(scan.vulnerabilities).forEach(([severity, count]) => {
                report.summary[severity] = (report.summary[severity] || 0) + count;
                report.summary.total_vulnerabilities += count;
              });
            }
          });

          // Write consolidated report
          fs.writeFileSync('security-report.json', JSON.stringify(report, null, 2));

          // Generate markdown summary
          const markdown = \`
          # Security Scan Report

          **Generated:** \${report.timestamp}
          **Repository:** \${report.repository}
          **Branch:** \${report.branch}
          **Commit:** \${report.commit}

          ## Summary

          | Severity | Count |
          |----------|-------|
          | Critical | \${report.summary.critical} |
          | High     | \${report.summary.high} |
          | Medium   | \${report.summary.medium} |
          | Low      | \${report.summary.low} |
          | **Total** | **\${report.summary.total_vulnerabilities}** |

          ## Scans Performed

          \${Object.keys(report.scans).map(scan => \`- \${scan}\`).join('\\n')}

          ## Recommendations

          \${report.summary.critical > 0 ? '🚨 **CRITICAL**: Address critical vulnerabilities immediately!' : ''}
          \${report.summary.high > 0 ? '⚠️ **HIGH**: Review and fix high severity issues' : ''}
          \${report.summary.medium > 0 ? '📝 **MEDIUM**: Plan fixes for medium severity issues' : ''}
          \${report.summary.total_vulnerabilities === 0 ? '✅ **CLEAN**: No vulnerabilities found!' : ''}
          \`;

          fs.writeFileSync('security-report.md', markdown);
          EOF

      - name: Upload consolidated security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: |
            security-report.json
            security-report.md

      - name: Comment security report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Fail if critical vulnerabilities found
        run: |
          CRITICAL_COUNT=$(node -p "JSON.parse(require('fs').readFileSync('security-report.json')).summary.critical")
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "❌ Found $CRITICAL_COUNT critical vulnerabilities!"
            exit 1
          else
            echo "✅ No critical vulnerabilities found"
          fi

      - name: Send security alert to Slack
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              channel: '#security',
              username: 'Security Scanner',
              icon_emoji: ':warning:',
              text: '🚨 Security vulnerabilities detected in GlobalTaxCalc!',
              attachments: [{
                color: 'danger',
                fields: [{
                  title: 'Repository',
                  value: '${{ github.repository }}',
                  short: true
                }, {
                  title: 'Branch',
                  value: '${{ github.ref_name }}',
                  short: true
                }, {
                  title: 'Workflow',
                  value: '${{ github.workflow }}',
                  short: true
                }, {
                  title: 'Action',
                  value: 'Review security report and fix vulnerabilities',
                  short: false
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}