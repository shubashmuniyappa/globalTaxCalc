        <div class="footer">
            <div class="disclaimer">
                <strong>Disclaimer:</strong>
                This report is generated by {{config.branding.companyName}} for informational purposes only.
                Tax calculations are estimates based on provided data and current tax laws.
                Please consult with a qualified tax professional for personalized advice.
                The information contained in this report should not be considered as professional tax advice.
                {{config.branding.companyName}} is not responsible for any errors or omissions in the tax calculations.
            </div>

            <div style="margin-top: 15px;">
                <strong>{{config.branding.companyName}}</strong> - Professional Tax Calculation Service
                <br>
                Report generated on {{formatDate timestamp format="full"}}
                <br>
                Report ID: {{reportId}} | Version: {{version}}
            </div>

            {{#if customFooterText}}
            <div style="margin-top: 10px; font-style: italic;">
                {{customFooterText}}
            </div>
            {{/if}}
        </div>
    </div>

    <script>
        // Initialize charts after DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Register Chart.js plugins
            Chart.register(ChartDataLabels);

            // Set global chart defaults
            Chart.defaults.font.family = 'Inter';
            Chart.defaults.color = '#374151';
            Chart.defaults.plugins.tooltip.backgroundColor = 'rgba(0, 0, 0, 0.8)';
            Chart.defaults.plugins.tooltip.titleColor = '#ffffff';
            Chart.defaults.plugins.tooltip.bodyColor = '#ffffff';
            Chart.defaults.plugins.tooltip.borderColor = '#e5e7eb';
            Chart.defaults.plugins.tooltip.borderWidth = 1;

            // Currency formatter for tooltips
            const currencyFormat = new Intl.NumberFormat('{{locale}}', {
                style: 'currency',
                currency: '{{currency}}',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            });

            // Percentage formatter for tooltips
            const percentFormat = new Intl.NumberFormat('{{locale}}', {
                style: 'percent',
                minimumFractionDigits: 1,
                maximumFractionDigits: 2
            });

            // Make formatters globally available
            window.currencyFormat = currencyFormat;
            window.percentFormat = percentFormat;

            // Initialize all charts on the page
            const chartContainers = document.querySelectorAll('[data-chart-config]');
            chartContainers.forEach(container => {
                try {
                    const config = JSON.parse(container.getAttribute('data-chart-config'));
                    const canvas = container.querySelector('canvas');
                    if (canvas && config) {
                        new Chart(canvas, config);
                    }
                } catch (error) {
                    console.warn('Failed to initialize chart:', error);
                }
            });

            // Add print functionality
            window.printReport = function() {
                window.print();
            };

            // Add export functionality placeholder
            window.exportReport = function(format) {
                console.log('Export to', format, 'requested');
                // This would typically make an API call to export the report
            };

            // Initialize print button if exists
            const printButton = document.getElementById('print-button');
            if (printButton) {
                printButton.addEventListener('click', window.printReport);
            }

            // Initialize export buttons
            document.querySelectorAll('[data-export-format]').forEach(button => {
                button.addEventListener('click', function() {
                    const format = this.getAttribute('data-export-format');
                    window.exportReport(format);
                });
            });

            // Initialize tooltips (if using a tooltip library)
            if (typeof bootstrap !== 'undefined') {
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.map(function(tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl);
                });
            }

            console.log('Report initialized successfully');
        });

        // Utility functions for templates
        window.ReportUtils = {
            formatCurrency: function(amount, options = {}) {
                const formatter = new Intl.NumberFormat('{{locale}}', {
                    style: 'currency',
                    currency: options.currency || '{{currency}}',
                    minimumFractionDigits: options.showCents !== false ? 2 : 0,
                    maximumFractionDigits: options.showCents !== false ? 2 : 0
                });
                return formatter.format(amount || 0);
            },

            formatPercent: function(value, options = {}) {
                const formatter = new Intl.NumberFormat('{{locale}}', {
                    style: 'percent',
                    minimumFractionDigits: options.decimals || 1,
                    maximumFractionDigits: options.decimals || 2
                });
                return formatter.format(value || 0);
            },

            formatNumber: function(value, options = {}) {
                const formatter = new Intl.NumberFormat('{{locale}}', {
                    minimumFractionDigits: options.decimals || 0,
                    maximumFractionDigits: options.decimals || 0
                });
                return formatter.format(value || 0);
            },

            addClass: function(element, className) {
                if (element && className) {
                    element.classList.add(className);
                }
            },

            removeClass: function(element, className) {
                if (element && className) {
                    element.classList.remove(className);
                }
            }
        };

        // Performance monitoring
        window.addEventListener('load', function() {
            if (performance.mark) {
                performance.mark('report-loaded');
                const loadTime = performance.now();
                console.log('Report load time:', Math.round(loadTime), 'ms');
            }
        });
    </script>
</body>
</html>