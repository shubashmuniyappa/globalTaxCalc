# GitHub Actions CI/CD Pipeline for GlobalTaxCalc Testing
# Comprehensive testing automation with quality gates and deployment

name: GlobalTaxCalc CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance
          - security

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Static Analysis and Linting
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd testing-qa
          npm ci

      - name: Run ESLint
        run: |
          cd testing-qa
          npm run lint -- --format=json --output-file=reports/eslint-report.json
        continue-on-error: true

      - name: Run Prettier check
        run: |
          cd testing-qa
          npm run format -- --check

      - name: TypeScript type checking
        run: |
          cd testing-qa
          npm run typecheck

      - name: Upload lint results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lint-results
          path: testing-qa/reports/eslint-report.json

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-report.json

      - name: Upload Snyk results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: snyk-results
          path: snyk-report.json

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [static-analysis]
    strategy:
      matrix:
        node-version: ['16.x', '18.x', '20.x']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd testing-qa
          npm ci

      - name: Run unit tests
        run: |
          cd testing-qa
          npm run test:unit -- --coverage --reporters=default --reporters=jest-junit
        env:
          JEST_JUNIT_OUTPUT_DIR: reports
          JEST_JUNIT_OUTPUT_NAME: junit-unit-${{ matrix.node-version }}.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results-${{ matrix.node-version }}
          path: |
            testing-qa/reports/junit-unit-*.xml
            testing-qa/coverage/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: testing-qa/coverage/lcov.info
          flags: unit-tests
          name: unit-tests-${{ matrix.node-version }}

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: globaltaxcalc_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd testing-qa
          npm ci

      - name: Setup test environment
        run: |
          cd testing-qa
          npm run setup:test-env
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/globaltaxcalc_test
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: |
          cd testing-qa
          npm run test:integration
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/globaltaxcalc_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: testing-qa/reports/

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    strategy:
      matrix:
        browser: [chrome, firefox]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd testing-qa
          npm ci

      - name: Start application services
        run: |
          cd testing-qa
          docker-compose -f docker-compose.test.yml up -d
          npm run wait-for-services

      - name: Run E2E tests
        run: |
          cd testing-qa
          npm run test:e2e -- --browser ${{ matrix.browser }}
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            testing-qa/tests/e2e/screenshots/
            testing-qa/tests/e2e/videos/
            testing-qa/reports/

      - name: Stop services
        if: always()
        run: |
          cd testing-qa
          docker-compose -f docker-compose.test.yml down

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'performance'
    needs: [e2e-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd testing-qa
          npm ci

      - name: Install K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start application services
        run: |
          cd testing-qa
          docker-compose -f docker-compose.test.yml up -d
          npm run wait-for-services

      - name: Run performance tests
        run: |
          cd testing-qa
          npm run test:performance
        env:
          TARGET_URL: http://localhost:3000

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: testing-qa/reports/performance/

      - name: Stop services
        if: always()
        run: |
          cd testing-qa
          docker-compose -f docker-compose.test.yml down

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'security'
    needs: [e2e-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd testing-qa
          npm ci

      - name: Start application services
        run: |
          cd testing-qa
          docker-compose -f docker-compose.test.yml up -d
          npm run wait-for-services

      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Run custom security tests
        run: |
          cd testing-qa
          npm run test:security
        env:
          TARGET_URL: http://localhost:3000

      - name: Upload security results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: |
            testing-qa/reports/security/
            report_html.html
            report_json.json

      - name: Stop services
        if: always()
        run: |
          cd testing-qa
          docker-compose -f docker-compose.test.yml down

  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd testing-qa
          npm ci

      - name: Evaluate quality gates
        run: |
          cd testing-qa
          node scripts/quality-gates.js
        env:
          COVERAGE_THRESHOLD: 90
          MAX_FAILED_TESTS: 0
          PERFORMANCE_THRESHOLD: 3000

      - name: Generate consolidated report
        run: |
          cd testing-qa
          node scripts/generate-consolidated-report.js

      - name: Upload consolidated report
        uses: actions/upload-artifact@v3
        with:
          name: consolidated-test-report
          path: testing-qa/reports/consolidated/

  # Deployment
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan]
    if: >
      success() &&
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') &&
      github.event_name != 'pull_request'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
        run: |
          echo "Deploying to ${{ github.event.inputs.environment || 'staging' }}"
          # Deployment logic would go here

      - name: Run post-deployment tests
        run: |
          cd testing-qa
          npm run test:smoke -- --env ${{ github.event.inputs.environment || 'staging' }}

  # Notifications
  notifications:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [quality-gates, deploy]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

      - name: Create GitHub issue on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'CI/CD Pipeline Failed',
              body: `The CI/CD pipeline failed for commit ${context.sha}.\n\nWorkflow: ${context.workflow}\nRun: ${context.runNumber}`,
              labels: ['bug', 'ci-cd']
            })

# Reusable workflow components
workflows:
  test-automation:
    name: Test Automation
    runs-on: ubuntu-latest
    steps:
      - name: Run comprehensive test suite
        run: |
          cd testing-qa
          node scripts/run-all-tests.js
        env:
          NODE_ENV: ${{ github.event.inputs.environment || 'test' }}
          PARALLEL: 'true'
          COVERAGE: 'true'
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}